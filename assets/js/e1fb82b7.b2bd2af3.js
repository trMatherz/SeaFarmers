"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[930],{3324:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>d,contentTitle:()=>u,default:()=>f,frontMatter:()=>l,metadata:()=>i,moduleName:()=>m,toc:()=>h});const i=JSON.parse('{"id":"solutions/TVS2025/PNF-403","title":"PNF-403","description":"Prerequisites: Nothing","source":"@site/docs/solutions/TVS2025/PNF-403.mdx","sourceDirName":"solutions/TVS2025","slug":"/solutions/TVS2025/PNF-403","permalink":"/SeaFarmers/docs/solutions/TVS2025/PNF-403","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"defaultSidebar","previous":{"title":"MimickingJerry","permalink":"/SeaFarmers/docs/solutions/LearnToCode/MimickingJerry"}}');var s=t(4848),r=t(8453),o=(t(6540),t(2407),t(8092)),a=t(8866),c=t(426);const l={},u="PNF-403 Solution",d={},m="LearnToCode",h=[];function p(n){const e={h1:"h1",header:"header",p:"p",...(0,r.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(o.A,{moduleName:m}),"\n",(0,s.jsx)(e.header,{children:(0,s.jsx)(e.h1,{id:"pnf-403-solution",children:"PNF-403 Solution"})}),"\n",(0,s.jsx)(e.p,{children:"Prerequisites: Nothing"}),"\n",(0,s.jsx)(e.h1,{id:"breakdown",children:"Breakdown"}),"\n",(0,s.jsx)(e.p,{children:"This is a simulation problem, so all you have to do is translate the problem into code form. You can do this\nwith If-Statements and variables, but I used a map to simplify."}),"\n",(0,s.jsx)(e.h1,{id:"implementation",children:"Implementation"}),"\n",(0,s.jsx)("div",{style:{transform:"translateX(150px)"},children:(0,s.jsx)(a.A,{language:"cpp",style:c.A,children:'#include <cmath>\n#include <cstdio>\n#include <vector>\n// #include <iostream> \n#include <fstream>\nstd::ifstream cin ("case8.txt");\nstd::ofstream cout ("out8.txt");\n#include <algorithm>\n#include <map>\nusing namespace std;\n\n\nint main() {\n  int n; \n  cin >> n; \n  map<char, long long> cur; \n  for(int i = 0; i < n; i++) {\n      int k; \n      cin >> k; \n      for(int j = 0; j < k; j++) {\n          string w; long long x; char y; \n          cin >> w >> x >> y; \n          if(w == "Grow") cur[y] += x; \n          else if(w == "Die") cur[y] -= x; \n          else {\n              char z; \n              cin >> z; \n              cur[y] -= x; \n              cur[z] += x; \n          }\n      }\n      cout << cur[\'R\'] << " " << \'R\' << " ";\n      cout << cur[\'B\'] << " " << \'B\' << " ";\n      cout << cur[\'P\'] << " " << \'P\' << endl; \n  }\n}\n'})})]})}function f(n={}){const{wrapper:e}={...(0,r.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(p,{...n})}):p(n)}}}]);