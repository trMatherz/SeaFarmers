"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5738],{870:(n,e,s)=>{s.r(e),s.d(e,{assets:()=>l,contentTitle:()=>h,default:()=>j,frontMatter:()=>d,metadata:()=>a,moduleName:()=>m,toc:()=>x});const a=JSON.parse('{"id":"solutions/LearnToCode/WhyDidTheCowCrossTheRoad","title":"WhyDidTheCowCrossTheRoad","description":"Tags: Vectors","source":"@site/docs/solutions/LearnToCode/WhyDidTheCowCrossTheRoad.mdx","sourceDirName":"solutions/LearnToCode","slug":"/solutions/LearnToCode/WhyDidTheCowCrossTheRoad","permalink":"/SeaFarmers/docs/solutions/LearnToCode/WhyDidTheCowCrossTheRoad","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"defaultSidebar","previous":{"title":"WhosOlder","permalink":"/SeaFarmers/docs/solutions/LearnToCode/WhosOlder"},"next":{"title":"LegendOfTheRoom","permalink":"/SeaFarmers/docs/solutions/TVS2025/LegendOfTheRoom"}}');var i=s(4848),t=s(8453),o=(s(6540),s(2407),s(8092)),r=s(8866),c=s(426);const d={},h="Why Did The Cow Cross The Road Solution",l={},m="LearnToCode",x=[];function u(n){const e={annotation:"annotation",h1:"h1",header:"header",math:"math",mi:"mi",mo:"mo",mrow:"mrow",p:"p",semantics:"semantics",span:"span",...(0,t.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(o.A,{moduleName:m}),"\n",(0,i.jsx)(e.header,{children:(0,i.jsx)(e.h1,{id:"why-did-the-cow-cross-the-road-solution",children:"Why Did The Cow Cross The Road Solution"})}),"\n",(0,i.jsx)(e.p,{children:"Tags: Vectors"}),"\n",(0,i.jsx)(e.h1,{id:"breakdown",children:"Breakdown"}),"\n",(0,i.jsx)(e.p,{children:"We can simulate this process using a vector to keep track of which side of the road a cow is on.\nIf we havn't seen the cow, they are at -1."}),"\n",(0,i.jsxs)(e.p,{children:["This runs in ",(0,i.jsxs)(e.span,{className:"katex",children:[(0,i.jsx)(e.span,{className:"katex-mathml",children:(0,i.jsx)(e.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,i.jsxs)(e.semantics,{children:[(0,i.jsxs)(e.mrow,{children:[(0,i.jsx)(e.mi,{mathvariant:"script",children:"O"}),(0,i.jsx)(e.mo,{stretchy:"false",children:"("}),(0,i.jsx)(e.mi,{children:"n"}),(0,i.jsx)(e.mo,{stretchy:"false",children:")"})]}),(0,i.jsx)(e.annotation,{encoding:"application/x-tex",children:"\\mathcal{O}(n)"})]})})}),(0,i.jsx)(e.span,{className:"katex-html","aria-hidden":"true",children:(0,i.jsxs)(e.span,{className:"base",children:[(0,i.jsx)(e.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,i.jsx)(e.span,{className:"mord mathcal",style:{marginRight:"0.02778em"},children:"O"}),(0,i.jsx)(e.span,{className:"mopen",children:"("}),(0,i.jsx)(e.span,{className:"mord mathnormal",children:"n"}),(0,i.jsx)(e.span,{className:"mclose",children:")"})]})})]})]}),"\n",(0,i.jsx)(e.h1,{id:"implementation",children:"Implementation"}),"\n",(0,i.jsx)("div",{style:{transform:"translateX(150px)"},children:(0,i.jsx)(r.A,{language:"cpp",style:c.A,children:'#include <cmath>\n#include <cstdio>\n#include <vector>\n#include <fstream>\nstd::ifstream cin ("reduce.in");\nstd::ofstream cout ("reduce.out");\n#include <algorithm>\nusing namespace std;\n\n\nconst int N = 40\'005; \nint main() {\n  int n; \n  cin >> n; \n  vector<pair<int, int>> a(n); \n  for(int i = 0; i < n; i++) cin >> a[i].first >> a[i].second; \n  int gx1 = N, gx2 = -N, gy1 = N, gy2 = -N; // fence for all cows\n  for(int j = 0; j < n; j++) {\n      gx1 = min(gx1, a[j].first); \n      gx2 = max(gx2, a[j].first); \n      gy1 = min(gy1, a[j].second); \n      gy2 = max(gy2, a[j].second); \n  }\n  int an = (gx2 - gx1) * (gy2 - gy1); \n  for(int i = 0; i < n; i++) {\n      int x1 = N, x2 = -N, y1 = N, y2 = -N; // fence without cow i IF cow is on the global fence\n      if(gx1 != a[i].first && gx2 != a[i].first && gy1 != a[i].second && gy2 != a[i].second) continue; \n      for(int j = 0; j < n; j++) {\n          if(i == j) continue; \n          x1 = min(x1, a[j].first); \n          x2 = max(x2, a[j].first); \n          y1 = min(y1, a[j].second); \n          y2 = max(y2, a[j].second); \n      }\n      an = min(an, (x2 - x1) * (y2 - y1));\n  }\n  cout << an; \n}\n\n'})})]})}function j(n={}){const{wrapper:e}={...(0,t.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(u,{...n})}):u(n)}}}]);