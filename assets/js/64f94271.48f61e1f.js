"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9864],{66178:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>d,contentTitle:()=>m,default:()=>p,frontMatter:()=>c,metadata:()=>s,moduleId:()=>h,toc:()=>u});const s=JSON.parse('{"id":"solutions/Novice/DiamondCollector","title":"DiamondCollector","description":"Tags: 2P","source":"@site/docs/solutions/Novice/DiamondCollector.mdx","sourceDirName":"solutions/Novice","slug":"/solutions/Novice/DiamondCollector","permalink":"/SeaFarmers/docs/solutions/Novice/DiamondCollector","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"defaultSidebar","previous":{"title":"CreatingStrings","permalink":"/SeaFarmers/docs/solutions/Novice/CreatingStrings"},"next":{"title":"DistinctNumbers","permalink":"/SeaFarmers/docs/solutions/Novice/DistinctNumbers"}}');var t=i(74848),a=i(28453),r=(i(96540),i(42407),i(28092)),o=i(38866),l=i(40426);const c={},m="Diamond Collector Solution",d={},h="Novice",u=[];function x(n){const e={annotation:"annotation",h1:"h1",header:"header",math:"math",mi:"mi",mo:"mo",mrow:"mrow",p:"p",semantics:"semantics",span:"span",...(0,a.R)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.A,{moduleId:h}),"\n",(0,t.jsx)(e.header,{children:(0,t.jsx)(e.h1,{id:"diamond-collector-solution",children:"Diamond Collector Solution"})}),"\n",(0,t.jsx)(e.p,{children:"Tags: 2P"}),"\n",(0,t.jsx)(e.h1,{id:"breakdown",children:"Breakdown"}),"\n",(0,t.jsx)(e.p,{children:"The answer is the max of lef[i] + rig[i] where lef[i] represents the max amount of ways to collect with one group that\nincludes at MOST dimaond i. rig[i] is similar."}),"\n",(0,t.jsx)(e.p,{children:"We can use two pointers to calculate all these values."}),"\n",(0,t.jsxs)(e.p,{children:["This runs in ",(0,t.jsxs)(e.span,{className:"katex",children:[(0,t.jsx)(e.span,{className:"katex-mathml",children:(0,t.jsx)(e.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,t.jsxs)(e.semantics,{children:[(0,t.jsxs)(e.mrow,{children:[(0,t.jsx)(e.mi,{mathvariant:"script",children:"O"}),(0,t.jsx)(e.mo,{stretchy:"false",children:"("}),(0,t.jsx)(e.mi,{children:"n"}),(0,t.jsx)(e.mo,{stretchy:"false",children:")"})]}),(0,t.jsx)(e.annotation,{encoding:"application/x-tex",children:"\\mathcal{O}(n)"})]})})}),(0,t.jsx)(e.span,{className:"katex-html","aria-hidden":"true",children:(0,t.jsxs)(e.span,{className:"base",children:[(0,t.jsx)(e.span,{className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,t.jsx)(e.span,{className:"mord mathcal",style:{marginRight:"0.02778em"},children:"O"}),(0,t.jsx)(e.span,{className:"mopen",children:"("}),(0,t.jsx)(e.span,{className:"mord mathnormal",children:"n"}),(0,t.jsx)(e.span,{className:"mclose",children:")"})]})})]})]}),"\n",(0,t.jsx)(e.h1,{id:"implementation",children:"Implementation"}),"\n",(0,t.jsx)("div",{style:{transform:"translateX(150px)"},children:(0,t.jsx)(o.A,{language:"cpp",style:l.A,children:'#include <cmath>\n#include <cstdio>\n#include <vector>\n#include <fstream>\nstd::ifstream cin("diamond.in");\nstd::ofstream cout("diamond.out");\n#include <algorithm>\nusing namespace std;\n\nint main() {\n  int n, k; cin >> n >> k; \n  int an = 0; \n  vector<int> a(n); \n  for(int i = 0; i < n; i++) cin >> a[i]; \n  sort(a.begin(), a.end()); \n  vector<int> lef(n, 1), rig(n, 1); \n  int r = 0; \n  for(int i = 0; i < n - 1; i++) {\n      while(r < n && a[i] - k > a[r]) r++; \n      lef[i + 1] = lef[i] = max(i - r + 1, lef[i]); \n  }\n  r = n - 1; \n  for(int i = n - 1; i > 0; i--) {\n      while(r >= 0 && a[r] > a[i] + k) r--; \n      rig[i - 1] = rig[i] = max(r - i + 1, rig[i]); \n  }\n  for(int i = 0; i < n - 1; i++) emax(an, lef[i] + rig[i + 1]); \n  cout << an; \n}\n'})})]})}function p(n={}){const{wrapper:e}={...(0,a.R)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(x,{...n})}):x(n)}}}]);